---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import mainlootImage from "../img/mainloot.png";
import ScrollButton from "./utils/ScrollButton.astro";
import { serverCard } from "../data/ServerCard";

const { serverId, nextServerId, prevServerId } = Astro.props;

// Define the desired order
const desiredOrder = ["us-peace", "us-love", "us-war", "us-vanilla"];
---

<section class="server-card-section" id={serverId}>
  <div class="content-wrapper" id={serverId}>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <Image
        src={mainlootImage}
        alt="mainloot"
        class="w-full object-cover main-image"
        loading="lazy"
      />
      <div id="server-card-grid" class="server-card-grid">
        {serverCard.map((card) => (
          <article class="server-card" data-server-id={`us-${card.title.toLowerCase()}`}>
            <div class="image-container">
              <Image
                src={card.imageSrc}
                alt={`${card.title} server`}
                class="card-image"
                loading="lazy"
              />
              <div class="image-overlay"></div>
            </div>
            <div class="card-content">
              <h3 class="card-title">
                <Icon
                  name={card.icon}
                  class="card-icon"
                  style={`color: ${card.color};`}
                />
                <a
                  href={`#${card.title.toLowerCase()}`}
                  class="title-link"
                  data-target-id={card.title.toLowerCase()}
                >
                  {card.title}
                </a>
              </h3>
              <p class="card-description">{card.description}</p>
              <p class="card-info">
                <Icon
                  name="mdi:calendar-sync"
                  class="info-icon"
                  style={`color: ${card.color};`}
                />
                <span data-info="schedule_type">N/A</span>
              </p>
              <p class="card-info">
                <Icon name="mdi:calendar-arrow-left" class="info-icon text-gray-600" />
                <span class="text-gray-400"><span class="text-white" data-info="status">N/A</span></span>
              </p>
              <p class="card-info">
                <Icon
                  name="mdi:calendar-star-outline"
                  class="info-icon"
                  style="color: LightGreen;"
                />
                <span data-info="countdown">N/A</span>
              </p>
              <p class="card-info">
                <Icon
                  name="mdi:account-group"
                  class="info-icon"
                  style="color: white;"
                />
                <span data-info="population">0</span> / 100
              </p>
            </div>
          </article>
        ))}
      </div>
    </div>
    <div class="flex justify-center space-x-4 mt-8 hidden sm:flex">
      {prevServerId && (
        <ScrollButton
          targetId={prevServerId}
          buttonId={`${serverId}-up`}
          direction="up"
          animationDelay="0s"
          marginTop="mt-12"
        />
      )}
      {nextServerId && (
        <ScrollButton
          targetId={nextServerId}
          buttonId={`${serverId}-down`}
          direction="down"
          animationDelay="2s"
          marginTop="mt-12"
        />
      )}
    </div>
  </div>
</section>

<script>
  const desiredOrder = ["us-peace", "us-love", "us-war", "us-vanilla"];

  async function fetchServerData() {
    try {
      const response = await fetch("/api/servers");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const serverData = await response.json();
      return serverData;
    } catch (error) {
      console.error("Failed to fetch server data:", error);
      return {};
    }
  }

  function updateServerCard(serverId, serverInfo) {
    const card = document.querySelector(`[data-server-id="${serverId}"]`);
    if (card) {
      card.querySelector('[data-info="schedule_type"]').textContent = serverInfo.wipeInfo?.schedule_type || 'N/A';
      card.querySelector('[data-info="status"]').textContent = serverInfo.wipeInfo?.status || 'N/A';
      card.querySelector('[data-info="countdown"]').textContent = serverInfo.wipeInfo?.countdown || 'N/A';
      card.querySelector('[data-info="population"]').textContent = serverInfo.population;
    }
  }

  async function renderServerCards() {
    const serverData = await fetchServerData();
    const serverCardGrid = document.getElementById('server-card-grid');
    
    if (serverCardGrid) {
      const sortedServerKeys = Object.keys(serverData).sort((a, b) => {
        return desiredOrder.indexOf(a) - desiredOrder.indexOf(b);
      });

      sortedServerKeys.forEach((serverId) => {
        const serverInfo = serverData[serverId];
        updateServerCard(serverId, serverInfo);
      });

      // Reorder the cards based on the desired order
      desiredOrder.forEach((serverId) => {
        const card = serverCardGrid.querySelector(`[data-server-id="${serverId}"]`);
        if (card) {
          serverCardGrid.appendChild(card);
        }
      });
    }
  }

  // Call the function when the DOM is loaded
  document.addEventListener('DOMContentLoaded', renderServerCards);
</script>
<style>
  .server-card-section {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 2rem 0;
    background-color: #000;
  }

  .content-wrapper {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
  }

  .main-image {
    width: 100%;
    max-height: 50vh;
    object-fit: cover;
    margin-bottom: 2rem;
  }

  .server-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .server-card {
    display: flex;
    flex-direction: column;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .server-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .image-container {
    position: relative;
    padding-top: 75%; /* 4:3 Aspect Ratio */
  }

  .card-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.2);
  }

  .card-content {
    padding: 1rem;
  }

  .card-title {
    display: flex;
    align-items: center;
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
  }

  .card-icon {
    margin-right: 0.5rem;
    font-size: 1.5rem;
  }

  .title-link {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .title-link:hover {
    color: #64748b;
  }

  .card-description {
    font-size: 0.875rem;
    color: #9ca3af;
    margin-bottom: 1rem;
  }

  .card-info {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: white;
    margin-bottom: 0.5rem;
  }

  .info-icon {
    margin-right: 0.5rem;
    font-size: 1.25rem;
  }

  .navigation-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }

  @media (max-width: 640px) {
    .server-card-section {
      padding: 1rem 0;
    }

    .server-card-grid {
      grid-template-columns: 1fr;
    }

    .main-image {
      max-height: 30vh;
    }
  }
</style>
