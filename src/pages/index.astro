---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import ServerCard from "../components/ServerCard.astro";
import ServerSection from "../components/ServerSection.astro";
import ServerPanel from "../components/ServerPanel.astro";
import Team from "../components/Team.astro";
---
<Layout title="mainloot - discord.gg/mainloot">
  <div class="site-container">
    <main class="main-content">
      <Header />
      <Hero serverId="hero" nextServerId="server-card"/>
      <ServerCard serverId="server-card" nextServerId="peace" prevServerId="hero"/>
      <ServerSection serverId="peace" nextServerId="love" prevServerId="server-card"/>
      <ServerSection serverId="love" nextServerId="war" prevServerId="peace" reverse={true} />
      <ServerSection serverId="war" nextServerId="vanilla" prevServerId="love" />
      <ServerSection serverId="vanilla" nextServerId="ServerPanel" prevServerId="war" reverse={true} />
      <ServerPanel serverId="ServerPanel" nextServerId="Team" prevServerId="vanilla" />
      <Team serverId="Team" prevServerId="ServerPanel" />
    </main>
  </div>
</Layout>

<style>
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
  }
  .site-container {
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  .main-content {
    flex-grow: 1;
    overflow-y: auto;
    scroll-behavior: smooth;
  }
  :global(.section-container) {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 2rem 0;
  }
  @media (max-width: 640px) {
    :global(.section-container) {
      padding: 1rem 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('header') as HTMLElement;
    const mainContent = document.querySelector('.main-content') as HTMLElement;
    const sections = document.querySelectorAll('.section-container');

    function adjustLayout() {
      const headerHeight = header?.offsetHeight || 0;
      const mainHeight = window.innerHeight - headerHeight;
      mainContent.style.height = `${mainHeight}px`;

      sections.forEach(section => {
        (section as HTMLElement).style.minHeight = `${mainHeight}px`;
      });
    }

    adjustLayout();
    window.addEventListener('resize', adjustLayout);

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          history.replaceState(null, null, `#${entry.target.id}`);
        }
      });
    }, {threshold: 0.5});

    sections.forEach(section => {
      observer.observe(section);
    });

    function smoothScroll(targetId: string) {
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        mainContent.scrollTo({
          top: targetElement.offsetTop - header.offsetHeight,
          behavior: 'smooth'
        });
      }
    }

    document.querySelectorAll('[id$="-up"], [id$="-down"]').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = (button as HTMLElement).getAttribute('data-target-id');
        if (targetId) {
          smoothScroll(targetId);
        }
      });
    });
  });
</script>